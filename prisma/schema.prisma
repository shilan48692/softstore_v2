generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                       String    @id @default(uuid())
  name                     String
  slug                     String    @unique
  description              String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  status                   ProductStatus @default(ACTIVE)
  additionalRequirementIds String[]
  allowComment             Boolean   @default(true)
  analyticsCode            String
  autoDeliverKey           Boolean   @default(true)
  autoSyncQuantityWithKey  Boolean   @default(true)
  categoryId               String?
  customBodyCode           String?
  customHeadCode           String?
  expiryDays               Int?
  faq                      String?
  gameCode                 String    @unique
  gameKeyText              String?
  guideText                String?
  guideUrl                 String?
  imageUrl                 String?
  importPrice              Int
  importSource             String?
  lowStockWarning          Int?
  mainKeyword              String?
  maxPerOrder              Int?
  metaDescription          String?
  metaTitle                String?
  minPerOrder              Int       @default(1)
  originalPrice            Int
  popupContent             String?
  popupEnabled             Boolean   @default(false)
  popupTitle               String?
  promotionEnabled         Boolean   @default(true)
  promotionEndDate         DateTime?
  promotionPrice           Int?
  promotionQuantity        Int?
  promotionStartDate       DateTime?
  quantity                 Int       @default(0)
  requirePhone             Boolean   @default(false)
  secondaryKeywords        String[]
  shortDescription         String?
  showMoreDescription      Boolean   @default(false)
  tags                     String[]
  warrantyPolicy           String?
  keys                     Key[]
  category                 Category? @relation(fields: [categoryId], references: [id])
  Product_A                Product[] @relation("RelatedProducts")
  Product_B                Product[] @relation("RelatedProducts")
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  imageUrl    String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  chatLink          String?
  fullName          String
  loginIPs          String[]
  note              String?
  otpLogin          OtpType            @default(DISABLED)
  otpPayment        OtpType            @default(DISABLED)
  phone             String?
  receiveNewsletter Boolean            @default(false)
  totalPaid         Int                @default(0)
  totalProfit       Int                @default(0)
  username          String             @unique
  role              Role               @default(USER)
  impersonatedUsers ImpersonationLog[] @relation("AdminImpersonation")
  impersonatedBy    ImpersonationLog[] @relation("UserImpersonation")
  orders            Order[]
  picture           String?
  googleId          String?            @unique
}

model ImportSource {
  id          String  @id @default(uuid())
  name        String  @unique
  contactLink String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  keys        Key[]
}

model Key {
  id             String    @id @default(uuid())
  activationCode String
  note           String?
  cost           Int       @default(0)
  status         KeyStatus @default(AVAILABLE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  usedAt         DateTime?
  productId      String
  orderId        String?
  userId         String?
  userEmail      String?
  importSourceId String?
  product        Product      @relation(fields: [productId], references: [id])
  importSource   ImportSource? @relation(fields: [importSourceId], references: [id])
}

model Order {
  id             String               @id @default(uuid())
  userId         String?
  userEmail      String
  productName    String
  paymentMethod  String
  totalSellPrice Int
  totalCostPrice Int
  totalProfit    Int
  status         OrderStatus          @default(PENDING)
  purchasedAt    DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  user           User?                @relation(fields: [userId], references: [id])
  statusHistory  OrderStatusHistory[]
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  changedAt DateTime    @default(now())
  note      String?
  updatedBy String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ImpersonationLog {
  id        String    @id @default(uuid())
  adminId   String
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  admin     User      @relation("AdminImpersonation", fields: [adminId], references: [id])
  user      User      @relation("UserImpersonation", fields: [userId], references: [id])
}

model Admin {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String?
  name      String?
  role      AdminRole @default(ADMIN)
  googleId  String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum OtpType {
  DISABLED
  EMAIL
  TWO_FACTOR
}

enum Role {
  ADMIN
  USER
}

enum KeyStatus {
  AVAILABLE
  SOLD
  EXPORTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}
